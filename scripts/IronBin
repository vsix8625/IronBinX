#!/usr/bin/env bash
set -euo pipefail
# Copyright (C) 2024 Panagiotis Panteli 

# About This Project
# This custom build script tool is a work in progress. 
# I started coding in 2023, and while Iâ€™m excited to share my efforts, I am still learning and may encounter issues in the code. 
# Feedback, suggestions, and contributions are welcome as I continue to improve my skills!

# A simple command line build script tool for compiling C files.
# 

#------------------------------------------------------------------------------------------------------------------------ 
# COLOR CODES

RESET='\033[0m'
BOLD='\033[1m' BLACK='\033[30m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
MAGENTA='\033[35m'
CYAN='\033[36m'
WHITE='\033[37m'

#------------------------------------------------------------------------------------------------------------------------ 

IB_LOG_FILE="$HOME/Logs/ironbin/ib.log"

IB_VERSION="1.2.6.BETA"
if [[ "$#" -eq 0 ]]; then
  clear
  date
  printf "\n----------------------------------------------------------------------------------------------------\n"
  printf "IronBin\n Version: $IB_VERSION\n Latest Update: 11 Nov 2024\n Author: vsix\n Alias: ${RED}ib${RESET}\n\n"
  whereis IronBin 
  printf "\nFor more info ${RED}IronBin${RESET} or ${RED}ib${RESET} --help || -h\n"
  printf "Also 'man gcc' for more in depth compiler options.\n"
  printf "\n----------------------------------------------------------------------------------------------------\n"
  exit 0
fi
ib_help() {
  clear
  printf "\nIronBin help\n"
  printf "  Version: ${IB_VERSION}\n"
  printf "     ${RED}IronBin || ib ${YELLOW}--make${RESET} ${WHITE}Super_Project${RESET}\n"
  printf "     ${YELLOW} [ --make  | -m ]${RESET}: Makes a default C project ${CYAN}<dir_name>${RESET} will be a IronBin-XX where xx is a random number\n"
  printf "     ${YELLOW} [ --make  | -m ] ${CYAN}<dir_name>${RESET}: Makes a default C project with the set name\n"
  printf "     ${YELLOW} [ --make  | -m ] ${MAGENTA}<project_type>${RESET}: Makes a default C project with IronBin-XX name\n"
  printf "     ${YELLOW} [ --make  | -m ] ${CYAN}<dir_name> ${MAGENTA}<project_type>${RESET}: Makes a ${CYAN}<dir_name>${RESET} project with ${MAGENTA}<project_type>${RESET}\n"
  printf "     ${YELLOW} [ --build  | -b ]${RESET}: Builds the current project, this function checks for IronBin dependencies\n"
  printf "     ${YELLOW} [ --build-objects  | -bo ] [ empty | -v ]${RESET}: Makes object files for the project in build dir, -v option to show what is happening\n"
  printf "     ${YELLOW} [ --rebuild  | -rb ]${RESET}: Same as --build but cleans the bin directory before building\n"
  printf "     ${YELLOW} [ --assembly  | -asm ][ empty | -v ]${RESET}: Build assembly files for each file in src directory\n"
  printf "     ${YELLOW} [ --run  | -r ]${RESET}: Runs the executable set in ironbin_executable_name.ib\n"
  printf "     ${YELLOW} [ --show  | -s ]${RESET}: Shows the compile command\n"
  printf "     ${YELLOW} [ --rename  | -rn ]${RESET}: Rename the executable. Requires rebuild afterwards\n"
  printf "     ${YELLOW} [ --clean  | -cl ]${RESET}: Remove all executables from bin to moves them in the /.ironbin/trash\n"
  printf "     ${YELLOW} [ --empty-trash  | -et ]${RESET}: Empty the /.ironbin/trash directory\n"
  printf "     ${YELLOW} [ --tree  | -tr ]${RESET}: View the project tree\n"
  printf "     ${YELLOW} [ --load  | -l ]${RESET}: Load IronBin dependencies in an existing project\n"
  printf "     ${YELLOW} [ --add-lib  | -al ]${RESET}: Add a library to ironbin_compile_cmd.ib file\n"
  printf "     ${YELLOW} [ --dummies  | -dms ][ n ]${RESET}: Create an n number of C files with a sample C code\n"
  printf "     ${YELLOW} [ --help  | -h ]${RESET}: Run this help menu and exits\n"

  printf "\n"
}

if [[ "$1" == "--help" || "$1" == "-h"  ]]; then
  ib_help
  exit 0
fi

make_dir_name=""
project_type="-c"

make_function() {
  local dir_name="$1"
  local project_type="$2"

  if [[ -d "$dir_name" ]]; then
    printf "Error: Directory '$dir_name' already exists\n"
    return 1
  fi

  ironbin="${dir_name}/.ironbin"
  assets="${dir_name}/assets"
  bin="${dir_name}/bin"
  build="${dir_name}/build"
  config="${dir_name}/config"
  src="${dir_name}/src"
  include="${dir_name}/include"
  data="${dir_name}/data"
  logs="${dir_name}/logs"
  scripts="${dir_name}/scripts"

  mkdir "$dir_name" -v
  mkdir "${ironbin}" -v
  mkdir "${ironbin}/trash" -v

  case "$project_type" in 
    -c)
      printf "Setting up C project for '$dir_name'\n"
      mkdir -p -v "${bin}" "${build}" "${config}" "${src}" "${include}" "${data}" "${logs}" "${scripts}"
      main="${src}/main.c"
      touch "${main}" 
      #---------------------------------------------------------------------------------------------------- 
      # Initiate the main file
      printf "/*\n* Copyright (C) Panagiotis Panteli $(date) \n*\n*/\n" > "${main}"
      printf "#include <ACE/ACE.h>\n\n\n" >> "${main}"
      printf "int main(int argc, char **argv){\n\tACE_printf(\"OK\\\n\");\n\treturn ACE_SUCCESS;\n}" >> "${main}"
      #---------------------------------------------------------------------------------------------------- 
      # Setting up compile cmd
      ib_compile_cmd="gcc -Wall -O0 src/*.c -Iinclude -o bin/Ironbin_exe -lACE"
      printf "${ib_compile_cmd}" > "${build}/ironbin_compile_cmd.ib"
      #---------------------------------------------------------------------------------------------------- 
      # Simple pre compile
      gcc -Wall -O0 ${dir_name}/src/*.c -Iinclude -o ${dir_name}/bin/Ironbin_exe -lACE
      printf "Project ${BLUE}${dir_name}${RESET} pre compiled\n"
      LogForge --log $IB_LOG_FILE "${dir_name}: Project have been forged and pre compiled"
      #---------------------------------------------------------------------------------------------------- 
      exit 0
      ;;
    -csdl)
      printf "Setting up C project for '$dir_name'\n"
      mkdir -p -v "${bin}" "${assets}" "${build}" "${config}" "${src}" "${include}" "${data}" "${logs}" "${scripts}"
      main="${src}/main.c"
      touch "${main}" 
      #---------------------------------------------------------------------------------------------------- 
      # Initiate the main file
      printf "/*\n* Copyright (C) Panagiotis Panteli $(date) \n*\n*/\n" > "${main}"
      printf "#include <ACE/ACE.h>\n#include <SDL3/SDL_main.h>\n\n\n" >> "${main}"
      printf "int main(int argc, char **argv){\n\tACE_printf(\"OK\\\n\");\n\treturn ACE_SUCCESS;\n}" >> "${main}"
      #---------------------------------------------------------------------------------------------------- 
      # Setting up compile cmd
      ib_compile_cmd="gcc -Wall -O0 src/*.c -Iinclude -o bin/Ironbin_exe -lACE -lSDL3"
      printf "${ib_compile_cmd}" > "${build}/ironbin_compile_cmd.ib"
      #---------------------------------------------------------------------------------------------------- 
      # Simple pre compile
      gcc -Wall -O0 ${dir_name}/src/*.c -Iinclude -o ${dir_name}/bin/Ironbin_exe -lACE -lSDL3
      printf "Project ${BLUE}${dir_name}${RESET} pre compiled\n"
      LogForge --log $IB_LOG_FILE "${dir_name}: Project have been forged and pre compiled"

      # launch a kitty shell instance in the $dir_name and open vi
      # kitty --start-as fullscreen --directory="$dir_name" bash -c "nvim; exec bash" &
      # exit
      #gnome-terminal --window-with-profile=gnome -- bash -c "cd \"$dir_name\" && nvim; exec bash"
      #---------------------------------------------------------------------------------------------------- 
      exit 0
      ;;
    -cpp)
      printf "Setting up CPP project for '$dir_name'\n"
      mkdir -p -v "${bin}" "${build}" "${config}" "${src}" "${include}" "${data}"
      main="${src}/main.cpp"
      touch "${main}" 
      #---------------------------------------------------------------------------------------------------- 
      # Initiate the main file here
      # WIP
      #---------------------------------------------------------------------------------------------------- 
      exit 0
      ;;
     *)
      printf "Error: Unknow project type\n"
      exit 1
      ;;
  esac
}

#------------------------------------------------------------------------------------------------------------

while [[ "${1:-}" ]]; do
  case "${1:-}" in 
    --make | -m)
      shift
      if [[ -n "${1:-}" ]]; then 
        name_len="${#1}"
        if [[ name_len -gt 30 ]]; then
          printf "Invalid name length: %d should be less than 30 characters long\n" "${#1}"
          exit 1
        fi
        make_dir_name="$1"
        shift
      else
        random_n=$(( 1 + RANDOM % 100 ))
        make_dir_name="IronBin-${random_n}"
      fi

      if [[ -n "${1:-}" && "${1:-}" == -* ]]; then
        project_type="$1"
        shift
      fi
      
      printf "Directory name: ${make_dir_name}\n"
      printf "Project Type: ${project_type}\n"
      make_function "$make_dir_name" "$project_type"
      ;;
    # Build Case
    --build | -b)
      if [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "Cmd: ${RED}$1${RESET}\n"
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --build Fatal error: Ironbin dependencies not found. Make sure .irobin directory exists or use ib --load to reload dependencies." 
        exit -1
      fi
      clear
      printf "\nBuilding...\nSource Files:\n${YELLOW}"
      ls "src/"
      printf "${RESET}\nHeader Files:\n${BLUE}"
      ls "include"
      time $(cat < "build/ironbin_compile_cmd.ib")
      printf "${RESET}\n"
      cat "build/ironbin_compile_cmd.ib"
      printf "\nDone...\n"
      exit 0
      ;;
    # Build Case clear old binaries
    --rebuild | -rb)
      if [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "Cmd: ${RED}$1${RESET}\n"
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --rebuild Fatal error: Ironbin dependencies not found. Make sure .irobin directory exists or use ib --load to reload dependencies." 
        exit -1
      fi
      clear
      printf "\nCleaning bin...\n"
      rm -rf "bin"
      printf "\nBuilding...\nSource Files:\n"
      mkdir "bin" -v
      ls "src/"
      printf "\nHeader Files:\n"
      ls "include"
      time $(cat < "build/ironbin_compile_cmd.ib")
      printf "\n"
      cat "build/ironbin_compile_cmd.ib"
      printf "\nDone...\n"
      exit 0
      ;;
    # Run the compile command
    --run | -r)
      if [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "Cmd: ${RED}$1${RESET}\n"
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --run Fatal error: Ironbin dependencies not found. Make sure .irobin directory exists or use ib --load to reload dependencies." 
        exit -1
      fi
      $(grep -o "bin/[^ ]*" "$(pwd)/build/ironbin_compile_cmd.ib" > "$(pwd)/build/ironbin_executable_name.ib")
      executable=$(cat < "$(pwd)/build/ironbin_executable_name.ib")
      if [[ -x "${executable}" ]]; then
        printf "IB: Run ${executable}\n"
        "./${executable}"
      else
        printf "${RED}Fatal error: Executable not found. Run (IronBin --rebuild | -rb) and try again.${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): Executable not found" 
        exit -1
      fi
      ;;
    # Show the compile command
    --show | -s)
      if [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "Cmd: ${RED}$1${RESET}\n"
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --show Fatal error: Ironbin dependencies not found. Make sure .irobin directory exists or use ib --load to reload dependencies." 
        exit -1
      fi
      cat "$(pwd)/build/ironbin_compile_cmd.ib"
      exit 0
      ;;
    --clean | -cl)
      if [[ ! -d "$(pwd)/.ironbin/trash" ]] && [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "Cmd: ${RED}$1${RESET}\n"
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --clean Fatal error: Ironbin dependencies not found. Make sure .irobin directory exists or use ib --load to reload dependencies." 
        exit -1
      fi
      rand_n=$(( 1 + RANDOM % 100 ))
      mv "$(pwd)/bin" "$(pwd)/.ironbin/trash/trash-${rand_n}-$(date)" 
      mkdir "$(pwd)/bin"
      clear
      printf "${WHITE}IronBin${RESET}\n"
      tree -a "$(pwd)/.ironbin"
      exit 0
      ;;
    --empty-trash | -et)
      if [[ ! -d "$(pwd)/.ironbin/trash" && ! -d "$(pwd)/.ironbin" ]]; then
        printf "Cmd: ${RED}$1${RESET}\n"
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --empty-trash Fatal error: Ironbin dependencies not found. Make sure .irobin directory exists or use ib --load to reload dependencies." 
        exit -1
      fi
      rm -rf "$(pwd)/.ironbin/trash"
      mkdir "$(pwd)/.ironbin/trash"
      clear
      printf "${WHITE}IronBin${RESET}\n"
      tree -a "$(pwd)/.ironbin"
      exit 0
      ;;
    --tree | -tr)
      if [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "Cmd: ${RED}$1${RESET}\n"
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --tree Fatal error: Ironbin dependencies not found. Make sure .irobin directory exists or use ib --load to reload dependencies." 
        exit -1
      fi
      clear
      printf "${WHITE}IronBin${RESET}\n"
      tree -a 
      exit 0
      ;;
    --rename | -rn)
      if [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --rename Fatal error: Ironbin dependencies not found. Make sure .irobin directory exists or use ib --load to reload dependencies." 
        exit -1
      fi
      shift

      if [[ -z "${1:-}" ]]; then
        printf "${RED}Fatal error: New name required. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --rename <NAME> required"
        exit 1
      fi

      cmd_file="$(pwd)/build/ironbin_compile_cmd.ib"
      new_x_name="bin/$1"

      if [[ -f "$cmd_file" ]]; then
        sed -i "s|bin/[^ ]*|${new_x_name}|g" "${cmd_file}"
        printf "Updated command:\n"
        cat "$cmd_file"
        printf "\n${RED}Rebuild required${RESET}\n"
        exit 0
      fi
      ;;
    # Add library in the cmd line
    --add-lib | -al)
      if [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --add-lib Fatal error: Ironbin dependencies not found. Make sure .irobin directory exists or use ib --load to reload dependencies." 
        exit -1
      fi
      shift

      if [[ ! -n "${1:-}" ]]; then
        printf "${RED}Fatal error: Library name required. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --add-lib <NAME> required"
        exit -1
      fi

      ib_compile_c="$(pwd)/build/ironbin_compile_cmd.ib"
      if [[ -e $ib_compile_c  ]]; then
         sed -i -e "\$ s/$/ $1/" "$ib_compile_c"
         printf "Compile Command updated: $(cat < $(pwd)/build/ironbin_compile_cmd.ib)"
         exit 0
      fi
      ;;
    --custom-cmd | -cc)
      if [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --custom-cmd Fatal error: Ironbin dependencies not found. Make sure .irobin directory exists or use ib --load to reload dependencies." 
        exit -1
      fi
      shift
      
      clear
      printf "${RED}Caution: Command should be enclosed in double quotes \"\"${RESET}\n"
      if [[ ! -n "${1:-}" ]]; then
        printf "${RED}Fatal error: New compile command required. Aborting${RESET}\n"
        exit -1
      fi
      ib_compile_c="$(pwd)/build/ironbin_compile_cmd.ib"
      rm -rf ib_compile_c
      printf "$1" > "${ib_compile_c}"
      if [[ -e $ib_compile_c  ]]; then
         printf "Compile Command updated: $(cat < $(pwd)/build/ironbin_compile_cmd.ib)"
         exit 0
      fi
      ;;
    --load | -l)
      clear
      printf "${RED}Caution: This action will remove build directory and possible other directories and files${RESET}\n"
      while true; do
        read -p "Do you want to procced (yes/no): " choice
        case "$choice" in
          [Yy]* | yes)
            if [[ -d "$(pwd)/.ironbin" ]]; then
              printf "${RED}Ironbin directory found. Deleting${RESET}\n"
              rm -rf "$(pwd)/.ironbin"
            fi
            rm -rfv "$(pwd)/build" 
            mkdir -v "$(pwd)/build"
            mkdir -v "$(pwd)/.ironbin"
            mkdir -v "$(pwd)/.ironbin/trash"
            cmd_simple="gcc -Wall -O0 src/*.c -Iinclude -o bin/Ironbin_exe -lACE"
            printf "${cmd_simple}" > "$(pwd)/build/ironbin_compile_cmd.ib"
            printf "\n${BLUE}Ironbin loaded: Rebuild required${RESET}\n"
            tree -a "$(pwd)"
            exit 0
            ;;
          [Nn]* | no)
            printf "${RED}You chose not to procceed.Closing.${RESET}\n"
            exit 1
            ;;
          *)
            printf "${RED}Invalid input. Please enter (yes|no)${RESET}\n"
            ;;
        esac
      done
      ;;
    --build-objects | -bo)
      if [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting.${RESET}\n"
        exit -1
      fi
      if [[ ! -f "$(pwd)/build/ironbin_compile_cmd.ib" ]]; then
        printf "${RED}Compile command file not found! Ensure you have 'build/ironbin_compile_cmd.ib'.${RESET}\n"
        exit -1
      fi
      shift

      verbose=0
      count=0

      if [[ "${1:-}" == "-v" ]]; then
        verbose=1
        shift
      fi

      mkdir -p "$(pwd)/build/objects" -v

      clear
      compile_cmd=$(<"$(pwd)/build/ironbin_compile_cmd.ib")
      printf "${BLUE}Using compile command from ironbin_compile_cmd.ib: \n\$ ${YELLOW}$compile_cmd\n${RESET}"

      for src_file in src/*.c; do
        obj_file="build/objects/$(basename "${src_file%.c}.o")"

        if [[ ! -f "$obj_file" ]] || [[ "$src_file" -nt "$obj_file" ]]; then
          if [[ $verbose -eq 1 ]]; then
            printf "${YELLOW}Compiling $src_file to $obj_file...${RESET}\n"
          fi
          
          cmd="${compile_cmd/src\/\*.c/$src_file} -c -o $obj_file"
          eval "$cmd"


          if [[ $? -ne 0 ]]; then
            printf "${RED}Compilation failed for $src_file.${RESET}\n"
            exit 1
          fi
        else
          if [[ $verbose -eq 1 ]]; then
            printf "${CYAN}$src_file is up-to-date.${RESET}\n"
          fi
        fi
      done

      count=$(ls -1 "$(pwd)/build/objects/" | wc -l)
      printf "${BLUE}Linking %d object files...${RESET}\n" $count

      linking_part="${compile_cmd#*-o}"

      final_link="gcc build/objects/*.o -o ${linking_part}"

      printf "Building exe with: ${final_link}\n"

      eval "${final_link}"
      if [[ $? -ne 0 ]]; then
        printf "${RED}Linking failed.${RESET}\n"
        exit 1
      fi

      printf "${CYAN}Build successful. Executable created in bin directory.${RESET}\n"
      exit 0
      ;;
    --assembly | -asm)
      if [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting.${RESET}\n"
        exit -1
      fi
      if [[ ! -f "$(pwd)/build/ironbin_compile_cmd.ib" ]]; then
        printf "${RED}Compile command file not found! Ensure you have 'build/ironbin_compile_cmd.ib'.${RESET}\n"
        exit -1
      fi
      shift

      verbose=0

      if [[ "${1:-}" == "-v" ]]; then
        verbose=1
        shift
      fi

      mkdir -p "$(pwd)/build/assembly" -v
      
      for src_file in src/*.c; do
        base_name=$(basename $src_file .c)
        
        
        if [[ $verbose -eq 1 ]]; then
          cmd="gcc -Wall -O0 -S -fverbose-asm $src_file -o build/assembly/${base_name}_O0.s"
          cmd1="gcc -Wall -O3 -S -fverbose-asm $src_file -o build/assembly/${base_name}_O3.s"
        else
          cmd="gcc -Wall -O0 -S $src_file -o build/assembly/${base_name}_O0.s"
          cmd1="gcc -Wall -O3 -S $src_file -o build/assembly/${base_name}_O3.s"
        fi
        
        echo "Generating assembly files for $src_file"
        $cmd
        $cmd1
      done

      exit 0
      ;;
    --dummies | -dms)
      if [[ ! -d "$(pwd)/.ironbin" ]]; then
        printf "${RED}Fatal error: Ironbin dependencies not found. Aborting${RESET}\n"
        LogForge --log $IB_LOG_FILE "$(pwd): --dummies Fatal error: Ironbin dependencies not found. Make sure .irobin directory exists or use ib --load to reload dependencies." 
        exit -1
      fi
      shift

      if [[ "$1" -gt 10000 ]]; then
        printf "Number greater than allowed. {1-10,000}\n"
        exit 1
      fi

      for i in $(seq 1 "$1"); do 
        echo '#include <stdio.h>

        void function_'"$i"'() {
            printf("Hello from function '"$i"'.\\n");
          }' > "$(pwd)/src/dummy_file_$i.c"
      done
      exit 0
      ;;
    *)
      printf "Error: Unknown command\n"
      LogForge --log $IB_LOG_FILE "Unknown command error '$1'"
      ib_help
      exit 1
      ;;
  esac
  shift
done
